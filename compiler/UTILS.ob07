MODULE UTILS;

IMPORT sys := SYSTEM;

CONST

  MAX_PATH = 260;
  OFS_MAXPATHNAME = 128;
  MAX_PARAM = 1024;

TYPE

  STRING* = ARRAY MAX_PATH OF CHAR;
  FILENAME* = ARRAY 1024 OF CHAR;

  ITEM* = POINTER TO rITEM;
  LIST* = POINTER TO rLIST;

  rITEM* = RECORD
    Next*, Prev*: ITEM
  END;

  rLIST* = RECORD
    First*, Last*: ITEM;
    Count*: INTEGER;
    Pop*, Clear*: PROCEDURE (List: LIST);
    Push*: PROCEDURE (List: LIST; Item: ITEM);
    Insert*: PROCEDURE (List: LIST; Item, Prev: ITEM)
  END;

  OFSTRUCT = RECORD
    cBytes, fFixedDisk: CHAR;
    nErrCode, Reserved1, Reserved2: sys.CARD16;
    szPathName: ARRAY OFS_MAXPATHNAME OF CHAR
  END;

  TSystemTime = RECORD
    Year, Month, DayOfWeek, Day, Hour, Min, Sec, MSec: sys.CARD16
  END;

VAR

  Params: ARRAY MAX_PARAM, 2 OF INTEGER;
  hConsoleOutput, hConsoleInput, ParamCount*, Line*, Unit*: INTEGER;
  WriteConsole, ReadConsole:
    PROCEDURE (hConsoleOutput, lpBuffer, nNumberOfCharsToWrite,
      lpNumberOfCharsWritten, lpReserved: INTEGER): INTEGER;
  GetStdHandle: PROCEDURE (nStdHandle: INTEGER): INTEGER;
  CloseHandle: PROCEDURE(hObject: INTEGER): INTEGER;
  CreateFile: PROCEDURE(lpFileName, dwDesiredAccess, dwShareMode: INTEGER;
    lpSecurityAttributes: INTEGER;
      dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile: INTEGER): INTEGER;
  OpenFile: PROCEDURE(lpFileName: INTEGER; lpReOpenBuff: OFSTRUCT; uStyle: INTEGER): INTEGER;
  ReadFile, WriteFile: PROCEDURE(hFile, Buffer, nNumberOfBytesToRead, lpNumberOfBytesRead: INTEGER;
    lpOverlapped: INTEGER): INTEGER;
  CharToOem: PROCEDURE(lpszSrc, lpszDst: INTEGER): INTEGER;
  GetCommandLine: PROCEDURE(): INTEGER;
  GetLocalTime: PROCEDURE(T: TSystemTime);

PROCEDURE IsInf*(x: LONGREAL): BOOLEAN;
VAR h, l: SET;
BEGIN
  sys.GET(sys.ADR(x), l);
  sys.GET(sys.ADR(x) + 4, h);
  RETURN (h * {20..30} = {20..30}) & (h * {0..19} = {}) & (l * {0..31} = {})
END IsInf;

PROCEDURE Card16ToInt(w: sys.CARD16): INTEGER;
VAR i: INTEGER;
BEGIN
  sys.PUT(sys.ADR(i), w)
  RETURN i
END Card16ToInt;

PROCEDURE Encode(Year, Month, Day, Hour, Min, Sec, MSec: INTEGER): LONGREAL;
VAR d, i: INTEGER; M: ARRAY 13 OF CHAR;
BEGIN
  M := "_303232332323";
  IF (Year MOD 4 = 0) & (Year MOD 100 # 0) OR (Year MOD 400 = 0) THEN
    M[2] := "1"
  END;
  DEC(Year);
  d := Year * 365 + (Year DIV 4) - (Year DIV 100) + (Year DIV 400) + Day - 693594;
  FOR i := 1 TO Month - 1 DO
    d := d + ORD(M[i]) - ORD("0") + 28
  END;
  RETURN LONG(FLT(d)) + LONG(FLT(Hour * 3600000 + Min * 60000 + Sec * 1000 + MSec)) / 86400000.0D0
END Encode;

PROCEDURE Now*(): INTEGER;
VAR T: TSystemTime;
BEGIN
  GetLocalTime(T)
  RETURN FLOOR((Encode(Card16ToInt(T.Year), Card16ToInt(T.Month), Card16ToInt(T.Day),
    Card16ToInt(T.Hour), Card16ToInt(T.Min), Card16ToInt(T.Sec), Card16ToInt(T.MSec)) - 25569.0D0) * 86400.0D0)
END Now;

PROCEDURE strlen*(s: ARRAY OF CHAR): INTEGER;
VAR Res, Len: INTEGER;
BEGIN
  Len := LEN(s);
  Res := 0;
  WHILE (Res < Len) & (s[Res] # 0X) DO
    INC(Res)
  END
  RETURN Res
END strlen;

PROCEDURE GetProc(name: STRING; hMOD, adr: INTEGER);
BEGIN
  sys.PUT(adr, sys.GETPROC(hMOD, sys.ADR(name)))
END GetProc;

PROCEDURE GetChar(adr: INTEGER): CHAR;
VAR res: CHAR;
BEGIN
  sys.GET(adr, res)
  RETURN res
END GetChar;

PROCEDURE ParamParse;
VAR p, count: INTEGER; c: CHAR; cond: INTEGER;

  PROCEDURE ChangeCond(A, B, C: INTEGER);
  BEGIN
    cond := C;
    CASE c OF
    |0X: cond := 6
    |1X..20X: cond := A
    |22X: cond := B
    END
  END ChangeCond;

BEGIN
  p := GetCommandLine();
  cond := 0;
  count := 0;
  WHILE (count < MAX_PARAM) & (cond # 6) DO
    c := GetChar(p);
    CASE cond OF
    |0: ChangeCond(0, 4, 1); IF cond = 1 THEN Params[count, 0] := p END
    |4: ChangeCond(5, 0, 5); IF cond = 5 THEN Params[count, 0] := p END
    |1: ChangeCond(0, 3, 1); IF cond IN {0, 6} THEN Params[count, 1] := p - 1; INC(count) END
    |3, 5: ChangeCond(cond, 1, cond); IF cond = 6 THEN Params[count, 1] := p - 1; INC(count) END
    END;
    INC(p)
  END;
  ParamCount := count - 1
END ParamParse;

PROCEDURE AnsiToOem*(VAR str: ARRAY OF CHAR);
VAR res: INTEGER;
BEGIN
  str[LEN(str) - 1] := 0X;
  res := CharToOem(sys.ADR(str), sys.ADR(str))
END AnsiToOem;

PROCEDURE ParamStr*(VAR str: ARRAY OF CHAR; n: INTEGER);
VAR i, j, len: INTEGER; c: CHAR;
BEGIN
  j := 0;
  IF n < ParamCount + 1 THEN
    len := LEN(str) - 1;
    i := Params[n, 0];
    WHILE (j < len) & (i <= Params[n, 1]) DO
      c := GetChar(i);
      IF c # 22X THEN
        str[j] := c;
        INC(j)
      END;
      INC(i)
    END
  END;
  str[j] := 0X
END ParamStr;

PROCEDURE CreateF*(FName: ARRAY OF CHAR): INTEGER;
BEGIN
  RETURN CreateFile(sys.ADR(FName[0]), 0C0000000H, 0, 0, 2, 80H, 0)
END CreateF;

PROCEDURE CloseF*(F: INTEGER);
VAR res: INTEGER;
BEGIN
  res := CloseHandle(F)
END CloseF;

PROCEDURE OpenF*(FName: ARRAY OF CHAR; Mode: INTEGER): INTEGER;
VAR ofstr: OFSTRUCT;
BEGIN
  RETURN OpenFile(sys.ADR(FName[0]), ofstr, Mode)
END OpenF;

PROCEDURE Read*(F, Buffer, Count: INTEGER): INTEGER;
VAR res, n: INTEGER;
BEGIN
  IF ReadFile(F, Buffer, Count, sys.ADR(n), 0) = 0 THEN
    res := -1
  ELSE
    res := n
  END
  RETURN res
END Read;

PROCEDURE Write*(F, Buffer, Count: INTEGER): INTEGER;
VAR res, n: INTEGER;
BEGIN
  IF WriteFile(F, Buffer, Count, sys.ADR(n), 0) = 0 THEN
    res := -1
  ELSE
    res := n
  END
  RETURN res
END Write;

PROCEDURE Char*(F: INTEGER; VAR x: CHAR): BOOLEAN;
BEGIN
  RETURN Read(F, sys.ADR(x), sys.SIZE(CHAR)) = sys.SIZE(CHAR)
END Char;

PROCEDURE String*(s: ARRAY OF CHAR);
VAR count, res: INTEGER;
BEGIN
  res := WriteConsole(hConsoleOutput, sys.ADR(s[0]), strlen(s), sys.ADR(count), 0)
END String;

PROCEDURE CharC*(x: CHAR);
VAR count, res: INTEGER;
BEGIN
  res := WriteConsole(hConsoleOutput, sys.ADR(x), 1, sys.ADR(count), 0)
END CharC;

PROCEDURE Int*(x: INTEGER);
VAR i: INTEGER; buf: ARRAY 11 OF INTEGER;
BEGIN
  i := 0;
  REPEAT
    buf[i] := x MOD 10;
    x := x DIV 10;
    INC(i)
  UNTIL x = 0;
  REPEAT
    DEC(i);
    CharC(CHR(buf[i] + ORD("0")))
  UNTIL i = 0
END Int;

PROCEDURE Ln*;
BEGIN
  CharC(0AX)
END Ln;

PROCEDURE OutString*(str: ARRAY OF CHAR);
VAR s: FILENAME;
BEGIN
  COPY(str, s);
  AnsiToOem(s);
  String(s)
END OutString;

PROCEDURE UnitLine*(newUnit, newLine: INTEGER);
BEGIN
  Unit := newUnit;
  Line := newLine
END UnitLine;

PROCEDURE min*(a, b: INTEGER): INTEGER;
VAR Res: INTEGER;
BEGIN
  IF a < b THEN
    Res := a
  ELSE
    Res := b
  END
  RETURN Res
END min;

PROCEDURE Align*(n: INTEGER): INTEGER;
BEGIN
  RETURN (4 - n MOD 4) MOD 4
END Align;

PROCEDURE FloatToSet*(x: LONGREAL): SET;
VAR Res: SET;
BEGIN
  sys.PUT(sys.ADR(Res), FLOOR(x))
  RETURN Res
END FloatToSet;

PROCEDURE CAP(x: CHAR): CHAR;
BEGIN
  IF (x >= "a") & (x <= "z") THEN
    x := CHR(ORD(x) - 32)
  END
  RETURN x
END CAP;

PROCEDURE streq*(a, b: ARRAY OF CHAR): BOOLEAN;
VAR i: INTEGER;
BEGIN
  i := -1;
  REPEAT
    INC(i)
  UNTIL (CAP(a[i]) # CAP(b[i])) OR (a[i] = 0X) OR (b[i] = 0X)
  RETURN a[i] = b[i]
END streq;

PROCEDURE concat*(L, R: ARRAY OF CHAR; VAR Res: ARRAY OF CHAR);
VAR i, j: INTEGER;
BEGIN
  i := 0;
  WHILE (L[i] # 0X) & (i - 1 < LEN(Res)) DO
    Res[i] := L[i];
    INC(i)
  END;
  j := 0;
  WHILE (R[j] # 0X) & (j + i - 1 < LEN(Res)) DO
    Res[j + i] := R[j];
    INC(j)
  END;
  Res[j + i] := 0X
END concat;

PROCEDURE Push*(this: LIST; item: ITEM);
BEGIN
  IF this.Count = 0 THEN
    this.First := item;
    item.Prev := NIL
  ELSE
    this.Last.Next := item;
    item.Prev := this.Last
  END;
  INC(this.Count);
  this.Last := item;
  item.Next := NIL
END Push;

PROCEDURE Insert*(this: LIST; item, prev: ITEM);
BEGIN
  IF prev # this.Last THEN
    item.Next := prev.Next;
    item.Prev := prev;
    prev.Next := item;
    item.Next.Prev := item;
    INC(this.Count)
  ELSE
    Push(this, item)
  END
END Insert;

PROCEDURE Pop(this: LIST);
BEGIN
  IF this.Count # 0 THEN
    this.Last := this.Last.Prev;
    IF this.Count = 1 THEN
      this.First := NIL
    ELSE
      this.Last.Next := NIL
    END;
    DEC(this.Count)
  END
END Pop;

PROCEDURE Clear(this: LIST);
BEGIN
  this.First := NIL;
  this.Last := NIL;
  this.Count := 0
END Clear;

PROCEDURE CreateList*(): LIST;
VAR nov: LIST;
BEGIN
  NEW(nov);
  IF nov # NIL THEN
    nov.Pop := Pop;
    nov.Clear := Clear;
    nov.Push := Push;
    nov.Insert := Insert;
    nov.First := NIL;
    nov.Last := NIL;
    nov.Count := 0
  END
  RETURN nov
END CreateList;

PROCEDURE Revers(VAR str: FILENAME);
VAR a, b: INTEGER; c: CHAR;
BEGIN
  a := 0;
  b := strlen(str) - 1;
  WHILE a < b DO
    c := str[a];
    str[a] := str[b];
    str[b] := c;
    INC(a);
    DEC(b)
  END
END Revers;

PROCEDURE Split*(FName: FILENAME; VAR Path, Name, Ext: FILENAME);
VAR i, j, k: INTEGER;
BEGIN
  i := strlen(FName) - 1;
  j := 0;
  WHILE (i >= 0) & (FName[i] # "\") DO
    Name[j] := FName[i];
    DEC(i);
    INC(j)
  END;
  Name[j] := 0X;
  Revers(Name);
  j := 0;
  k := strlen(Name) - 1;
  WHILE (k >= 0) & (Name[k] # ".") DO
    Ext[j] := Name[k];
    DEC(k);
    INC(j)
  END;
  IF k >= 0 THEN
    Name[k] := 0X;
    Ext[j] := ".";
    INC(j)
  ELSE
    j := 0
  END;
  Ext[j] := 0X;
  Revers(Ext);
  j := i;
  FOR i := 0 TO j DO
    Path[i] := FName[i]
  END;
  Path[j + 1] := 0X
END Split;

PROCEDURE PChar*(s: ARRAY OF CHAR): INTEGER;
BEGIN
  RETURN sys.ADR(s[0])
END PChar;

PROCEDURE Init;
VAR kernel32, user32: INTEGER;
BEGIN
  kernel32 := sys.LOADLIB(sys.ADR("kernel32.dll"));
  GetProc("GetStdHandle", kernel32, sys.ADR(GetStdHandle));
  GetProc("WriteConsoleA", kernel32, sys.ADR(WriteConsole));
  GetProc("ReadConsoleA", kernel32, sys.ADR(ReadConsole));
  GetProc("CreateFileA", kernel32, sys.ADR(CreateFile));
  GetProc("CloseHandle", kernel32, sys.ADR(CloseHandle));
  GetProc("OpenFile", kernel32, sys.ADR(OpenFile));
  GetProc("ReadFile", kernel32, sys.ADR(ReadFile));
  GetProc("WriteFile", kernel32, sys.ADR(WriteFile));
  GetProc("GetCommandLineA", kernel32, sys.ADR(GetCommandLine));
  GetProc("GetLocalTime", kernel32, sys.ADR(GetLocalTime));
  user32 := sys.LOADLIB(sys.ADR("user32.dll"));
  GetProc("CharToOemA", user32, sys.ADR(CharToOem));
  hConsoleOutput := GetStdHandle(-11);
  hConsoleInput := GetStdHandle(-10);
  ParamParse
END Init;

BEGIN
  Init
END UTILS.
